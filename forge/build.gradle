plugins { id "com.github.johnrengelman.shadow" version "7.1.2" }
architectury { forge() }

loom {
    mixin { defaultRefmapName = "immersivesnow.forge.refmap.json" }
    forge {
        // mixinConfig "immersivesnow.forge.mixins.json"
        // mixinConfig "immersivesnow.mixins.json"
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
}

repositories { maven { url "https://cursemaven.com/" } }
dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft}-${parent.props.forge}"
    modApi "curse.maven:sereneseasons-291874:${parent.props.sereneseasons}-api-${parent.props.sereneseasonsapi}"
    modApi "curse.maven:hourglass-511172:${parent.props.hourglass}"
    modApi "curse.maven:snow-real-magic-308663:${parent.props.snowrealmagic}"
    modApi "curse.maven:kiwi-303657:${parent.props.kiwi}"
    if (rootProject.minecraft == "1.20.1") {
        modApi "curse.maven:glitchcore-955399:5787839"
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    def props = [
            "id"              : rootProject.id,
            "name"            : rootProject.displayname,
            "description"     : rootProject.description,
            "author"          : rootProject.author,
            "license"         : rootProject.license,
            "websiteUrl"      : rootProject.website,
            "issueTrackerUrl" : rootProject.issues,
            "forgeUpdateUrl"  : rootProject.updater,
            "version"         : project.version,
            "minecraftVersion": rootProject.minecraft,
            "fabricVersion"   : rootProject.props.fabric,
            "forgeVersion"    : rootProject.props.forge,
    ]

    inputs.properties props
    filesMatching("META-INF/mods.toml") { expand props }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

jar {
    archiveClassifier.set "dev"
    dependsOn processResources
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}
